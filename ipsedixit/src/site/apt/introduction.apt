            -----
            Introduction to Ipsedixit
            -----
            Jason Royals
            -----
            July 2008

Introduction

 <ip-sah-diks-it; Something that is asserted but unproved. He himself said [it]>.

* Why?

 Unit tests help developers design their API's and ensure that things behave as expected.

 Test driven development is something good developers do these days, and unit
 tests are arguably as, or more, important than the code they are testing. Ipsedixit was
 written "in the field" to help remove lots of setup code in your unit tests by automatically setting
 up standard test data for you.  That allows <you> to think about the problem you're driving out, instead of
 thinking up new canned test data.

* Ipsedixit in Action

 The easiest way to show Ipsedixit in action is by example.  In this example, we'll take a trivial unit test,
 and clean it up with this tool.  More complete {{{examples.html}examples}} are available.

 Let's test drive a class that concatenates two strings to form a name, using the normal approach, then with Ipsedixit.

** Traditional approach

 Here is a typical JUnit 4 test:

+------------------------------
public void NameHelperUnitTest {
    private NameHelper nameHelper;

    @Before
    public void setup() {
        nameHelper = new NameHelper();
    }

    @Test
    public void fullNameIsFirstNameSpaceLastName() {
        assertEquals("John Doe", nameHelper.getFullName("John", "Doe");
    }

    // more assertions...

}
+-------------------------------

 Imagine we were pairing on this peice of work, and applying the TDD principle of <only doing the bare amount to make
 the test go green>.  The simplest thing that works in this case is:

+------------------------------
public void NameBuilder {
    public String getFullName(String firstName, String lastName) {
        return "John Doe"; // this is wrong but it will pass the test!
    }
}
+-------------------------------

 Of course it is wrong, but the test goes green.  We've just "faked it until we make it", which shows that the assertion is
 too simple.  To fix this, lets write another test where we call the same method, but expect a different result.  This
 is called <triangulation>.

+------------------------------
public void NameHelperUnitTest {
    // previous tests ...

    @Test
    public void fullNameIsFirstNameSpaceLastNameAgain() {
        assertEquals("Fred Bloggs", nameHelper.getFullName("Fred", "Blogs");
    }
}
+-------------------------------

 The test now fails, and the only way to fix it is to go back to the implementation and "do it properly"...

+------------------------------
public void NameBuilder {
    public String getFullName(String firstName, String lastName) {
        return firstName + " " + lastName;
    }
}
+-------------------------------

 Now we have a working NameBuilder.  However, it took <two> tests just to extract the one method, simply because the
 implementation required this to drive it out fully.  That's a waste of time and Ipsedixit is here to help.

** Ipsedixit approach

 Here is an <Ipsedixified> JUnit 4 test:

+------------------------------
@RunWith(JUnit4IpsedixitTestRunner.class)
public void NameHelperUnitTest {
    private NameHelper nameHelper;
    private String firstName;
    private String lastName;

    @Before
    public void setup() {
        nameHelper = new NameHelper();
    }

    @Test
    public void fullNameIsFirstNameSpaceLastName() {
        String expectedFullName = firstName + " " + lastName;
        assertEquals(expectedFullName, nameHelper.getFullName(firstName, lastName);
    }

    // NO more assertions...

}
+-------------------------------

 What the heck?  Won't <<<expectedName>>> be "<<<null null>>>"?  How does this help?

 Lets have a look at the test first.  We've declared two new fields, firstName and lastName, and we have not initialised
 them (so yes, they are <<<null>>> initially).  In the test method, we've made up our expected result of firstName space
 lastName.  And finally, the test class uses a special JUnit4 TestRunner.  That's the fairy dust that makes it all happen!

 With that annotation, Ipsedixit will hook in to the JUnit runtime and before the test runs, will go and populate
 everything it can with some random data. So, by the time your test executes, those fields are <<not>> null at all,
 in fact they have been set to some random value that you (or your lazy pair) won't guess.  And, because that value will
 change each time you run the test, you now have triangulation for free!

 But the name is some random long string!  In <unit test>, does it matter if a name is really a name?  Does it matter
 that firstName = "John", or "Mary"?  Does it matter if the name is actually "firstName_klLjf7834q5Pkhsfkl"?  Most of the time,
 the value of the data does not matter.  And in any case, Ipsedixit allows you to specify how the randomised
 data is created anyway if it really <does> matter.

Next Steps

 This is a contrived example of Ipsedixit in action, and the {{{examples.html}examples}} show some much more powerful usages.
 Ipsedixit can handle just about anything you can put in a Class (with a few limitations), and you can even write your
 own handlers if you want some special behavior.  It will randomise Strings, Enums, numbers (int, double, short etc),
 and if it cant figure it out, will create an  EasyMock2 mock instead. Not using EasyMock2?  No problems, just roll
 your own handler and tell Ipsedixit you'd rather use something else.

 Secondly, a convenient utility class called <<<TestData>>> can be used to create some random data yourself. For example,
 how do you drive out that string.trim()?  Easy, use TestData.whitespace() to return some arbitrary whitepsace character.

 Ipsedixit is here to help your unit tests.
