            -----
            Examples
            -----
            Jason Royals
            -----
            July 2008

Introduction

 The following examples attempt to show Ipsedixit in a number of ways, with a number of scenario's.
 It's worth noting that Ipsedixit behaves the same way for all technoligies, the only difference is how
 Ipsedixit is declared.

 * {{JUnit4.x}}

 * {{JUnit3.8}}

 * {{{Spring}Spring TestExecutionListener}}

 * {{{Extension}Plain old extension}}

* {JUnit4.x}

** Example 1

 This example shows a test class from Ipsedixit, before and after.  It demonstrates the use of random test data, as
 well as using EasyMock for dummies as well as real mocks.

*** Before Ipsedixit

+-------------------------------
import static org.easymock.EasyMock.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
// other imports...

public class StringFieldHandlerUnitTest {
    private StringFieldHandler stringFieldHandler;
    private MetaDataCreator<StringMetaData> metaDataProvider;
    private RandomDataProvider randomDataProvider;
    private StringMetaData stringMetaData;
    private MutableField mutableField;

    private String contains = "contains";
    private int length = 100;
    private String prefix = "prefix";
    private String randomString = "randomString";
    private StringType stringType = StringType.ALPHANUMERIC;

    @Before
    public void setup() {
        metaDataProvider = createMock(MetaDataCreator.class);
        randomDataProvider = createMock(RandomDataProvider.class);
        stringMetaData = createMock(StringMetaData.class);
        mutableField = createMock(MutableField.class);
        stringFieldHandler = new StringFieldHandler(metaDataProvider, randomDataProvider);
    }

    // some tests...

    @Test
    public void willGetMetaDataAndRandomiserToProduceStringInCorrectFormat() {
        expect(metaDataProvider.getMetaData(mutableField)).andReturn(stringMetaData);
        expect(mutableField.getName()).andReturn(prefix);
        expect(stringMetaData.length()).andReturn(length);
        expect(stringMetaData.contains()).andReturn(contains);
        expect(stringMetaData.type()).andReturn(stringType);
        expect(randomDataProvider.randomString(stringType, length)).andReturn(randomString);
        replay(metaDataProvider, stringMetaData, randomDataProvider, mutableField);
        Object result = stringFieldHandler.getValueFor(mutableField);
        verify(metaDataProvider, stringMetaData, randomDataProvider, mutableField);
        assertEquals("prefix_contains_randomString", result);
    }

    // some more tests...
+-------------------------------

*** After Ipsedixit

+-------------------------------
import static org.easymock.EasyMock.*;
import static org.junit.Assert.*;
import org.junit.Before;
import org.junit.Test;
// other imports...

@RunWith(JUnit4IpsedixitTestRunner.class)
public class StringFieldHandlerUnitTest {
    private StringFieldHandler stringFieldHandler;
    private MetaDataCreator<StringMetaData> metaDataProvider;
    private RandomDataProvider randomDataProvider;
    private StringMetaData stringMetaData;
    private MutableField mutableField;

    private String contains; // by default, a random 64 character String
    private int length; // by default, a number between 1 and 255 inclusive
    private String prefix;
    private String randomString;
    private StringType stringType; // picks a random value from the Enumeration

    @Before
    public void setup() {
        stringFieldHandler = new StringFieldHandler(metaDataProvider, randomDataProvider);
    }

    // some tests...

    @Test
    public void willGetMetaDataAndRandomiserToProduceStringInCorrectFormat() {
        final String expectedResult = prefix + "_" + contains + "_" + randomString;

        expect(metaDataProvider.getMetaData(mutableField)).andReturn(stringMetaData);
        expect(mutableField.getName()).andReturn(prefix);
        expect(stringMetaData.length()).andReturn(length);
        expect(stringMetaData.contains()).andReturn(contains);
        expect(stringMetaData.type()).andReturn(stringType);
        expect(randomDataProvider.randomString(stringType, length)).andReturn(randomString);
        replay(metaDataProvider, stringMetaData, randomDataProvider, mutableField);
        Object result = stringFieldHandler.getValueFor(mutableField);
        verify(metaDataProvider, stringMetaData, randomDataProvider, mutableField);
        assertEquals(expectedResult, result);
    }

    // some more tests...
+-------------------------------

 Note that we no longer need to explicitly set any values, or set up EasyMock2 proxies.  The <<<setup>>> method now only
 creates the class under test, the rest is created automatically.